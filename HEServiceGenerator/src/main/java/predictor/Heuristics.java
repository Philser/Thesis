package predictor;

/**
 * Class containing HELib heuristics.
 * @author Philip Kaiser
 *
 */
public class Heuristics {
	private final static double[][] MULCosts =//r,L costs(bit),m,time costs(s)
		{	
			{16,29.118155,105,0.005519},
			{17,30.118155,105,0.002584},
			{18,31.118155,105,0.002879},
			{19,32.118155,105,0.002878},
			{20,33.118155,105,0.003494},
			{21,34.118155,105,0.002658},
			{22,35.118155,105,0.002623},
			{23,36.118155,105,0.002732},
			{24,37.118155,105,0.002555},
			{25,38.118155,105,0.004591},
			{26,39.118155,105,0.003321},
			{27,40.118155,105,0.004637},
			{16,31.443477,1023,0.020182},
			{17,32.443477,1023,0.024519},
			{18,33.443477,1023,0.021655},
			{19,34.443477,1023,0.042146},
			{20,35.443477,1023,0.021257},
			{21,36.443477,1023,0.020257},
			{22,37.443477,1023,0.019853},
			{23,38.443477,1023,0.019989},
			{24,39.443477,1023,0.020787},
			{25,40.443477,1023,0.020489},
			{26,41.443477,1023,0.019633},
			{27,42.443477,1023,0.020406},
			{16,31.504937,1705,0.033468},
			{17,32.504937,1705,0.034996},
			{18,33.504937,1705,0.032911},
			{19,34.504937,1705,0.032929},
			{20,35.504937,1705,0.034172},
			{21,36.504937,1705,0.033085},
			{22,37.504937,1705,0.034324},
			{23,38.504937,1705,0.032942},
			{24,39.504937,1705,0.032837},
			{25,40.504937,1705,0.036224},
			{26,41.504937,1705,0.032631},
			{27,42.504937,1705,0.038911},
			{16,31.418491,4095,0.08026},
			{17,32.418491,4095,0.070334},
			{18,33.418491,4095,0.106111},
			{19,34.418491,4095,0.071708},
			{20,35.418491,4095,0.103675},
			{21,36.418491,4095,0.070254},
			{22,37.418491,4095,0.072979},
			{23,38.418491,4095,0.082029},
			{24,39.418491,4095,0.094102},
			{25,40.418491,4095,0.111617},
			{26,41.418491,4095,0.121936},
			{27,42.418491,4095,0.168196},
			{16,33.329418,17425,0.422686},
			{17,34.329418,17425,0.430595},
			{18,35.329418,17425,0.44392},
			{19,36.329418,17425,0.510282},
			{20,37.329418,17425,0.451298},
			{21,38.329418,17425,0.450479},
			{22,39.329418,17425,0.513879},
			{23,40.329418,17425,0.500363},
			{24,41.329418,17425,0.442387},
			{25,42.329418,17425,0.472168},
			{26,43.329418,17425,0.452724},
			{27,44.329418,17425,0.465409},
			{16,33.288206,15709,0.608817},
			{17,34.288206,15709,0.462137},
			{18,35.288206,15709,0.419087},
			{19,36.288206,15709,0.43469},
			{20,37.288206,15709,0.421223},
			{21,38.288206,15709,0.414634},
			{22,39.288206,15709,0.436647},
			{23,40.288206,15709,0.428518},
			{24,41.288206,15709,0.454013},
			{25,42.288206,15709,0.422595},
			{26,43.288206,15709,0.419019},
			{27,44.288206,15709,0.434505},
			{16,36.976818,18631,0.715787},
			{17,37.976818,18631,0.533132},
			{18,38.976818,18631,0.52011},
			{19,39.976818,18631,0.653082},
			{20,40.976818,18631,0.584343},
			{21,41.976818,18631,0.560488},
			{22,42.976818,18631,0.521646},
			{23,43.976818,18631,0.515416},
			{24,44.976818,18631,0.608666},
			{25,45.976818,18631,0.537896},
			{26,46.976818,18631,0.512559},
			{27,47.976818,18631,0.585021},
			{16,36.447622,24295,0.812395},
			{17,37.447622,24295,0.617769},
			{18,38.447622,24295,0.612285},
			{19,39.447622,24295,0.628247},
			{20,40.447622,24295,0.601904},
			{21,41.447622,24295,0.597126},
			{22,42.447622,24295,0.611233},
			{23,43.447622,24295,0.605591},
			{24,44.447622,24295,0.588634},
			{25,45.447622,24295,0.612907},
			{26,46.447622,24295,0.605757},
			{27,47.447622,24295,0.599509},
			{16,36.779458,27305,0.959661},
			{17,37.779458,27305,0.661641},
			{18,38.779458,27305,0.658003},
			{19,39.779458,27305,0.680812},
			{20,40.779458,27305,0.66878},
			{21,41.779458,27305,0.657516},
			{22,42.779458,27305,0.615616},
			{23,43.779458,27305,0.716075},
			{24,44.779458,27305,0.709894},
			{25,45.779458,27305,0.677114},
			{26,46.779458,27305,0.688881},
			{27,47.779458,27305,0.679934},
			{16,36.676612,28679,0.766049},
			{17,37.676612,28679,0.728729},
			{18,38.676612,28679,0.72301},
			{19,39.676612,28679,0.721677},
			{20,40.676612,28679,0.766646},
			{21,41.676612,28679,0.705264},
			{22,42.676612,28679,0.694039},
			{23,43.676612,28679,0.910186},
			{24,44.676612,28679,0.711785},
			{25,45.676612,28679,0.720911},
			{26,46.676612,28679,0.740953},
			{27,47.676612,28679,0.757857},
			{16,36.611002,31775,1.328989},
			{17,37.611002,31775,0.776322},
			{18,38.611002,31775,0.806433},
			{19,39.611002,31775,0.776315},
			{20,40.611002,31775,0.815652},
			{21,41.611002,31775,0.794556},
			{22,42.611002,31775,0.732577},
			{23,43.611002,31775,0.782803},
			{24,44.611002,31775,0.76589},
			{25,45.611002,31775,0.875918},
			{26,46.611002,31775,0.775054},
			{27,47.611002,31775,0.783214},
			{16,36.773721,27311,1.088027},
			{17,37.773721,27311,0.7678},
			{18,38.773721,27311,0.767704},
			{19,39.773721,27311,0.772597},
			{20,40.773721,27311,0.757093},
			{21,41.773721,27311,0.759574},
			{22,42.773721,27311,0.800557},
			{23,43.773721,27311,0.756906},
			{24,44.773721,27311,0.77297},
			{25,45.773721,27311,0.744821},
			{26,46.773721,27311,0.762005},
			{27,47.773721,27311,0.777107},
			{16,36.358867,32767,0.804588},
			{17,37.358867,32767,0.839225},
			{18,38.358867,32767,0.855332},
			{19,39.358867,32767,0.814663},
			{20,40.358867,32767,0.813426},
			{21,41.358867,32767,0.80001},
			{22,42.358867,32767,0.759577},
			{23,43.358867,32767,0.759394},
			{24,44.358867,32767,0.841853},
			{25,45.358867,32767,0.819113},
			{26,46.358867,32767,0.821634},
			{27,47.358867,32767,1.00228},
			{16,36.45416,35113,1.253590917},
			{17,37.45416,35113,1.122505},
			{18,38.45416,35113,1.082924},
			{19,39.45416,35113,1.350996},
			{20,40.45416,35113,1.015855},
			{21,41.45416,35113,1.024096},
			{22,42.45416,35113,1.117423},
			{23,43.45416,35113,1.00923},
			{24,44.45416,35113,1.023586},
			{25,45.45416,35113,1.07934},
			{26,46.45416,35113,1.0341},
			{27,47.45416,35113,1.075054},
			{16,36.425878,45655,2.438325},
			{17,37.425878,45655,1.540307},
			{18,38.425878,45655,1.262361},
			{19,39.425878,45655,1.398983},
			{20,40.425878,45655,1.229207},
			{21,41.425878,45655,1.523359},
			{22,42.425878,45655,1.233314},
			{23,43.425878,45655,1.220465},
			{24,44.425878,45655,1.246649},
			{25,45.425878,45655,1.396486},
			{26,46.425878,45655,1.233486},
			{27,47.425878,45655,1.245877},
			{16,36.714348,42799,2.604614},
			{17,37.714348,42799,1.246608},
			{18,38.714348,42799,1.246429},
			{19,39.714348,42799,1.263418},
			{20,40.714348,42799,1.269839},
			{21,41.714348,42799,1.266582},
			{22,42.714348,42799,1.243414},
			{23,43.714348,42799,1.277362},
			{24,44.714348,42799,1.806501},
			{25,45.714348,42799,1.264269},
			{26,46.714348,42799,1.402624},
			{27,47.714348,42799,1.310032},
			{16,36.52478,46063,1.341105},
			{17,37.52478,46063,1.362512},
			{18,38.52478,46063,1.331719},
			{19,39.52478,46063,1.333651},
			{20,40.52478,46063,1.622259},
			{21,41.52478,46063,1.354292},
			{22,42.52478,46063,1.343446},
			{23,43.52478,46063,1.414861},
			{24,44.52478,46063,1.757508},
			{25,45.52478,46063,1.328815},
			{26,46.52478,46063,1.37712},
			{27,47.52478,46063,1.386345},
			{16,36.144178,53261,1.515723},
			{17,37.144178,53261,1.518641},
			{18,38.144178,53261,1.511147},
			{19,39.144178,53261,1.486978},
			{20,40.144178,53261,1.516683},
			{21,41.144178,53261,1.485208},
			{22,42.144178,53261,1.486801},
			{23,43.144178,53261,1.476663},
			{24,44.144178,53261,1.555154},
			{25,45.144178,53261,1.806254},
			{26,46.144178,53261,1.501182},
			{27,47.144178,53261,1.560778},
			{16,36.577948,49981,3.192316},
			{17,37.577948,49981,2.902708},
			{18,38.577948,49981,1.549601},
			{19,39.577948,49981,2.480347},
			{20,40.577948,49981,1.685192},
			{21,41.577948,49981,3.118288},
			{22,42.577948,49981,1.863593},
			{23,43.577948,49981,3.038524},
			{24,44.577948,49981,2.036983},
			{25,45.577948,49981,1.737654},
			{26,46.577948,49981,1.843536},
			{27,47.577948,49981,1.88912},
			{16,36.314264,55831,3.260141},
			{17,37.314264,55831,3.662887},
			{18,38.314264,55831,2.64149},
			{19,39.314264,55831,4.110477},
			{20,40.314264,55831,3.593577},
			{21,41.314264,55831,1.897425},
			{22,42.314264,55831,1.875033},
			{23,43.314264,55831,2.859915},
			{24,44.314264,55831,2.105457},
			{25,45.314264,55831,1.872334},
			{26,46.314264,55831,3.730956},
			{27,47.314264,55831,2.081793}
		};
	
	private final static double[][] BootstrappableM = //k, m, r, L, recryptTime(s)
		{{14.594384,15709,16,600,40.519789},
			{39.380698,18631,16,600,55.434457},
			{20.690649,18631,16,700,68.086273},
			{2.537037,18631,16,800,78.706206},
			{20.690649,18631,17,700,61.5627},
			{2.537037,18631,17,800,100.490962},
			{20.690649,18631,18,700,65.154433},
			{2.537037,18631,18,800,76.959942},
			{20.690649,18631,19,700,65.53929},
			{2.537037,18631,19,800,86.870677},
			{20.690649,18631,20,700,62.746152},
			{1.905949,18631,20,800,79.9801},
			{1.905949,18631,21,800,92.075826},
			{46.274491,24295,16,600,61.59439},
			{7.743688,24295,17,800,77.139834},
			{26.769576,24295,18,700,65.877502},
			{7.743688,24295,18,800,78.917549},
			{7.743688,24295,19,800,78.267052},
			{26.769576,24295,20,700,65.937278},
			{81.600071,27311,16,700,66.40762},
			{7.115689,24295,20,800,81.674308},
			{7.115689,24295,21,800,87.287589},
			{86.087102,32767,16,700,77.373798},
			{22.267575,27305,17,800,88.941642},
			{43.672692,27305,18,700,75.973625},
			{22.267575,27305,18,800,90.324948},
			{22.267575,27305,19,800,95.236095},
			{115.845009,35113,16,700,104.151213},
			{21.590372,27305,21,800,94.796586},
			{64.333059,31775,16,700,84.439258},
			{81.600071,27311,16,700,72.547763},
			{81.600071,27311,16,700,81.595887},
			{55.140703,27311,16,800,85.448194},
			{55.140703,27311,16,800,75.152246},
			{86.087102,32767,16,700,78.60409},
			{86.087102,32767,16,700,79.993935},
			{58.935438,32767,16,800,93.840285},
			{58.935438,32767,16,800,99.899874},
			{115.845009,35113,16,700,104.925064},
			{115.845009,35113,16,700,100.074282},
			{84.582077,35113,16,800,130.022299},
			{84.582077,35113,16,800,120.490744},
			{108.005995,45655,16,800,138.102381},
			{154.583117,42799,16,800,148.935157},
			{154.583117,42799,16,800,144.557605},
			{219.688143,46063,16,700,105.279683},
			{219.688143,46063,16,700,104.910468},
			{173.51418,46063,16,800,126.443689},
			{173.51418,46063,16,800,127.342598},
			{224.718859,53261,16,700,139.192121},
			{224.718859,53261,16,700,125.668196},
			{177.949402,53261,16,800,142.048546},
			{249.683673,49981,16,700,126.648517},
			{249.683673,49981,16,700,129.654556},
			{199.245548,49981,16,800,155.316723},
			{199.245548,49981,16,800,154.99842}};
	
	private final static double[][] InitCosts = //p r m context_time secKey_time pubKey_time encryption_time decryption_time bootstrappable
		{
				{2,16,27311,55.434136,12.614091,14.473078,0.298138,0.049753,0},
				{2,16,35113,280.618453,18.589592,21.132793,0.362514,0.012012,1}
		};
	
	public static double getInitTimeCosts(double m, boolean boostrappable) {
		for(int i = 0; i < InitCosts.length; i++) {
			System.out.println("m=" + (int)InitCosts[i][2]);
			double bootst = boostrappable ? 1 : 0;
			if((int)InitCosts[i][2] == (int)m && (int)bootst == (int)InitCosts[i][8])
				return InitCosts[i][3] + InitCosts[i][4] + InitCosts[i][5];
		}
		
		return 0;
	}
	
	public static double getLCostsForMul(double m, double r) {
		System.out.println("given: m=" + (int)m + " r=" + (int)r);
		for(int i = 0; i < MULCosts.length; i++) {
			System.out.println("m=" + (int)MULCosts[i][2] + " r=" + (int)MULCosts[i][0]);
			if((int)MULCosts[i][0] == (int)r && (int)MULCosts[i][2] == (int)m)
				return MULCosts[i][1];
		}
		
		return 0;
	}

	public static double getLCostsForAdd(double m, double r) {
		return 1;
	}

	public static double getTimeCostForRecrypt(double m, double levels, double r) {
		for(int i = 0; i < BootstrappableM.length; i++) {
			if(BootstrappableM[i][1] == m && BootstrappableM[i][3] == levels && BootstrappableM[i][2] == r)
				return BootstrappableM[i][4];
		}
		return 0;
	}

	public static double getTimeCostsForAdd(double m, double r) {
		if(m < 18631)
			return 0.0005;
		else if(m < 42799)
			return 0.0015;
		else
			return 0.0025;
	}

	public static double getTimeCostsForMul(double m, double r) {
		for(int i = 0; i < MULCosts.length; i++) {
			if(MULCosts[i][0] == r && MULCosts[i][2] == m)
				return MULCosts[i][3];
		}
		
		return 0;
	}
}
